class DatasetMode():
    @classmethod
    def lines(cls, length: int) -> DatasetMode: ...

    @classmethod
    def qa(cls, sep: str) -> DatasetMode: ...

class TextDataset():
    def __init__(
        self,
        file_name: str,
        tokenizer: Tokenizer,
        length: int = 32,
        modes: DatasetMode = DatasetMode.lines(1),
    ) -> None: ...

    def __len__(self) -> int: ...
    def __getitem__(self, idx: int) -> list[int]: ...

class Tokenizer():
    def __init__(self) -> None: ...
    def __iter__(self) -> VocabTreeIter: ...

    def train(
        self,
        readable: str,
        times: int = 10,
        min_frequency: float = 0.0001,
        file: bool = True
    ) -> None: ...
    def add_bases(self, bases: str) -> None: ...
    def add_token(self, token: str) -> None: ...
    def encode(self, content: str) -> list[int]: ...
    def decode(self, tokens: list[int]) -> str: ...
    def load(self, file_name: str) -> None: ...
    def save(self, file_name: str) -> None: ...

class VocabTreeIter():
    def __next__(self) -> tuple[str, int]: ...